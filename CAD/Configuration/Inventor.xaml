<?xml version="1.0" encoding="utf-8"?>

<WPF:DSWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
              xmlns:WPF="clr-namespace:dataStandard.UI.View;assembly=dataStandard.UI"
              xmlns:system="clr-namespace:System;assembly=mscorlib"
              xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
              xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
              x:Name="InventorWindow" WindowStyle="ToolWindow" ShowInTaskbar="False" Topmost="True"
              Background="#F0F0F0" ResizeMode="NoResize" SizeToContent="WidthAndHeight">
    <WPF:DSWindow.Resources>
        <Style x:Key="DynamicDataGridCellStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ComboBox ItemsSource="{Binding ListValues}" Text="{WPF:ValidatedBinding Value}"
                                  IsEditable="True" BorderThickness="0" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}" />
                </Trigger>
                <DataTrigger Binding="{Binding ListValues.Count}" Value="0">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <TextBox Text="{WPF:ValidatedBinding Value}" BorderThickness="0" Height="20.75" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Typ}" Value="DateTime">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <DatePicker SelectedDate="{WPF:ValidatedBinding Value, StringFormat=dd/MM/yyyy}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding Typ}" Value="Boolean">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <ComboBox Text="{WPF:ValidatedBinding Value}" IsEditable="True">
                                    <ComboBoxItem Content="True" />
                                    <ComboBoxItem Content="False" />
                                </ComboBox>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="DynamicDataGridLabelStyle" TargetType="{x:Type DataGridCell}">
            <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Margin" Value="0,2,0,0" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Padding" Value="5,3,3,2" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="BorderBrush" Value="#FFABADB3" />
            <Setter Property="BorderThickness" Value="1,1,1,0" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding Content, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="BorderBrush" Value="#ff0000" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Height" Value="24" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
                <Trigger Property="Validation.HasError" Value="false">
                    <Setter Property="BorderBrush" Value="#FFABADB3" />
                    <Setter Property="BorderThickness" Value="0,1,1,0" />
                </Trigger>
                <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowColorKey}}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="Required" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Text, RelativeSource={RelativeSource Self}}" Value="">
                    <Setter Property="BorderBrush" Value="Red" />
                    <Setter Property="BorderThickness" Value="1,1,1,1" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
            <Setter Property="Height" Value="24" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            <Setter Property="BorderBrush" Value="#FFABADB3" />
            <Setter Property="BorderThickness" Value="0,1,1,0" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type DatePicker}">
            <Setter Property="Height" Value="22" />
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                            Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ButtonGridStyle" TargetType="{x:Type Grid}">
            <Setter Property="Margin" Value="0,15,2,5" />
        </Style>
        <Style x:Key="NumSchmCtrlStyle" TargetType="{x:Type WPF:DSNumSchemeCtrl}">
            <Setter Property="Height" Value="26.0" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
            <Setter Property="BorderBrush" Value="Gray" />
            <Setter Property="BorderThickness" Value="0,1,1,0" />
        </Style>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <Style x:Key="btnScEnabled" TargetType="{x:Type Button}">
            <Setter Property="IsEnabled" Value="True" />
            <Setter Property="ToolTip" Value="{Binding UIString[MSDCE_TT20]}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Text, ElementName=txtNewShortCut}" Value="">
                    <Setter Property="IsEnabled" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ProjectFavorites" TargetType="{x:Type Expander}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CreateMode}" Value="True"/>
                        <Condition Binding="{Binding IsChecked, ElementName=GFN4Special}" Value="False"/>
                        <Condition Binding="{Binding PathAndFileNameHandler.EXT}" Value="IDW"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CreateMode}" Value="True"/>
                        <Condition Binding="{Binding IsChecked, ElementName=GFN4Special}" Value="False"/>
                        <Condition Binding="{Binding PathAndFileNameHandler.EXT}" Value="DWG"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CreateMode}" Value="True"/>
                        <Condition Binding="{Binding IsChecked, ElementName=GFN4Special}" Value="False"/>
                        <Condition Binding="{Binding PathAndFileNameHandler.EXT}" Value="IPN"/>
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding CreateMode}" Value="True">
                    <Setter Property="IsExpanded" Value="False" />
                </DataTrigger>
                <DataTrigger Binding="{Binding HasItems, ElementName=NumSchms}" Value="False">
                    <Setter Property="IsExpanded" Value="True" />
                </DataTrigger>
                <DataTrigger Binding="{Binding EditMode}" Value="True">
                    <Setter Property="IsExpanded" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </WPF:DSWindow.Resources>
    <WPF:DSWindow.InputBindings>
        <KeyBinding Key="F1" Command="{Binding PsCmd[mHelp(100)]}"/>
    </WPF:DSWindow.InputBindings>
    <Grid x:Name="grdMain"
          Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" ToolTip="Folder / Project" />
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto" ToolTip="{Binding UIString[LBL73], FallbackValue='General Properties'}" />
            <RowDefinition ToolTip="Resulting Path" Height="Auto" />
            <RowDefinition ToolTip="Buttons" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="203*"/>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <GroupBox x:Name="GroupFolder" Grid.Column="1" Grid.ColumnSpan="2" Margin="-6,0,0,5" BorderThickness="0" Header="Folder"
                  Visibility="{Binding CreateMode, Converter={StaticResource BooleanToVisibilityConverter}}">
            <WrapPanel x:Name="BreadCrumb"
                       ItemWidth="165" Margin="1,0,0,0">
                <WrapPanel.Resources>
                    <Style TargetType="{x:Type ComboBox}">
                        <Setter Property="Margin" Value="-1,0,0,0" />
                        <Setter Property="ToolTip"
                                Value="{Binding SelectedValue.Name, RelativeSource={RelativeSource Self}}" />
                    </Style>
                </WrapPanel.Resources>
            </WrapPanel>

        </GroupBox>
        <Grid x:Name="grdGeneralProps" Grid.Row="1" ToolTip="{Binding UIString[LBL73], FallbackValue='General Properties'}" MaxHeight="350" Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="24" />
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="140" />
                <ColumnDefinition MinWidth="180" MaxWidth="220" />
            </Grid.ColumnDefinitions>
            <Label Content="{Binding UIString[LBL8], FallbackValue=Category}"
        		Grid.Row="0"
        		Grid.Column="0" Height="Auto" />
            <ComboBox x:Name="Categories" Grid.Row="0" Grid.Column="1"
                      SelectedValuePath="Name"
                      SelectedValue="{Binding Prop[_Category].Value}"
                      DisplayMemberPath="Name"
                      SelectedItem="{Binding DynamicPropertiesCategory}"
                      ItemsSource="{Binding PsList[GetCategories], Mode=OneTime}"
                      IsEnabled="{Binding CreateMode}"/>
            <Label Content="{Binding UIString[LBL71], FallbackValue=Save As Type}" Grid.Row="1"/>
            <ComboBox x:Name="Format" Grid.Column="1" Grid.Row="1"
            	SelectedItem="{Binding Prop[_Format].Value, Mode=TwoWay}"
            	SelectedIndex="0"
            	ItemsSource="{Binding Prop[_Format].ListValues}"
                      />
            <Label Grid.Row="2"
        		Grid.Column="0"
        		Content="{Binding UIString[LBL10], FallbackValue=Number Scheme}" Visibility="{Binding Visibility, ElementName=NumSchms}" />
            <ComboBox Grid.Column="1"
        		Grid.Row="2"
        		x:Name="NumSchms"
                DisplayMemberPath="Name"
                SelectedValuePath="Name"
                SelectedValue="{Binding Prop[_NumSchm].Value}"
                ItemsSource="{Binding PsList[GetNumSchms], Mode=OneTime}"
                IsEnabled="{Binding HasItems, RelativeSource={RelativeSource Self}}" />
            <Label Grid.Row="3" Grid.Column="0"	Content="{Binding UIString[LBL31], FallbackValue=Number}" Visibility="{Binding Visibility, ElementName=DSNumSchmsCtrl}" Height="Auto"/>
            <WPF:DSNumSchemeCtrl x:Name="DSNumSchmsCtrl" Grid.Row="3"
        		Grid.Column="1"
        		Scheme="{Binding SelectedItem, ElementName=NumSchms}"
        		IsEnabled="{Binding IsEnabled, ElementName=NumSchms}"
        		GeneratedNumberProperty="DocNumber"
                Visibility="{Binding CreateMode, Converter={StaticResource BooleanToVisibilityConverter}}"
        		Style="{StaticResource NumSchmCtrlStyle}"/>
            <Border BorderBrush="#FFABADB3" Grid.Row="4" Margin="0" Grid.ColumnSpan="2" BorderThickness="0,1,0,0" Padding="0,15,0,0">
                <Image Source="{Binding Prop[Thumbnail].Value}" />
            </Border>
        </Grid>
        <Grid x:Name="DSDynCatPropGrid" MinHeight="80" Grid.Column="2" Margin="5,0,0,0" Grid.Row="1" ToolTip="{Binding UIString[LBL63], FallbackValue='Category Properties'}">
            <DataGrid x:Name="DSDynamicCategoryProperties"
        		AutoGenerateColumns="False"
        		HeadersVisibility="Column"
        		ItemsSource="{Binding DynamicProperties}"
        		ScrollViewer.CanContentScroll="False"
        		HorizontalGridLinesBrush="WhiteSmoke"
        		VerticalGridLinesBrush="WhiteSmoke" VerticalAlignment="Top" MaxHeight="350">
                <DataGrid.Columns>
                    <DataGridTextColumn Binding="{Binding DispName}" CellStyle="{StaticResource DynamicDataGridLabelStyle}"  MinWidth="140" Width="Auto" IsReadOnly="True" >
                        <DataGridTextColumn.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding DataContext.UIString[LBL64], RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                            </DataTemplate>
                        </DataGridTextColumn.HeaderTemplate>
                    </DataGridTextColumn>
                    <DataGridTemplateColumn Header="Property Value" CellStyle="{StaticResource DynamicDataGridCellStyle}" Width="*" MinWidth="180">
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding DataContext.UIString[LBL65], RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
        <Expander x:Name="expFilePath" Header="{Binding UIString[LBL6]}" Grid.ColumnSpan="2"
			ToolTip="{Binding UIString[MSDCE_TT05]}" Style="{StaticResource ExpanderStyle}" Grid.Row="3" Grid.Column="1" Margin="0,10,0,0">
            <Grid x:Name="grdFilePath" Background="#FFE5E5E5" Margin="0" RenderTransformOrigin="0.5,0.5" ToolTip="{Binding UIString[MSDCE_TT05]}" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="40*"/>
                    <ColumnDefinition Width="169*"/>
                </Grid.ColumnDefinitions>
                <Label x:Name="lblFileName" Content="{Binding UIString[LBL6], FallbackValue=File Name}" />
                <TextBox x:Name="FILENAME" Grid.Column="1" 	Style="{StaticResource Required}"
                         Text="{Binding Prop[DocNumber].Value}" IsEnabled="{Binding CreateMode}" IsReadOnly="{Binding EditMode}"
            		Visibility="{Binding NumSchmFieldsEmpty, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=DSNumSchmsCtrl}"/>
                <Label x:Name="lblPath" Content="{Binding UIString[LBL5], FallbackValue=Path}" Grid.Row="1" ToolTip="{Binding PathAndFileNameHandler.Path}" BorderThickness="1" />
                <TextBox x:Name="txtPath" VerticalAlignment="Stretch" Text="{Binding PathAndFileNameHandler.Path}" Grid.Row="1" Grid.Column="1" ToolTip="{Binding PathAndFileNameHandler.Path}" IsReadOnly="True" IsEnabled="False" BorderThickness="0,1,1,1" />
            </Grid>
        </Expander>
        <Grid x:Name="ButtonGrid" VerticalAlignment="Bottom" Style="{StaticResource ResourceKey=ButtonGridStyle}"
              Grid.ColumnSpan="2" Grid.Row="4" Grid.Column="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="80" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="80" />
                <ColumnDefinition Width="20" />
                <ColumnDefinition Width="80" />
            </Grid.ColumnDefinitions>
            <CheckBox x:Name="GFN4Special" Grid.Column="1" IsEnabled="False" Height="26" VerticalAlignment="Top" Width="26" HorizontalAlignment="Left" Visibility="Collapsed"/>
            <CheckBox x:Name="IsGFN4Type" Grid.Column="1" VerticalAlignment="Top" IsEnabled="False" Width="26" Height="26" Margin="20,0,0,0" HorizontalAlignment="Left" Visibility="Collapsed"/>
            <Button Command="{Binding CloseWindowCommand, ElementName=InventorWindow}"
                    IsEnabled="{Binding Properties.IsValid}" Grid.Column="2"
                    Width="80" HorizontalAlignment="Right" VerticalAlignment="Center"
                    ToolTipService.ShowOnDisabled="True" ToolTip="{Binding UIString[LBL35], FallbackValue=Cancel}"
                    Content="{Binding UIString[BTN1], FallbackValue=OK}" Height="24" IsDefault="True" />
            <Button Grid.Column="4" Width="80" HorizontalAlignment="Right" Height="24"
                    VerticalAlignment="Center" Command="{Binding CancelWindowCommand, ElementName=InventorWindow}"
                    IsCancel="true" Content="{Binding UIString[BTN2], FallbackValue=Cancel}" />
            <Button x:Name="btnHelp" Content="{Binding UIString[MSDCE_BTN1], FallbackValue=Help}" 
                    Command="{Binding PsCmd[mHelp(100)]}" Height="24" ToolTip="F1" />
        </Grid>
        <Expander x:Name="expShortCutPane" Header="" Grid.RowSpan="5" ExpandDirection="Left" IsExpanded="True"
        	Style="{StaticResource ProjectFavorites}" ToolTip="{Binding UIString[MSDCE_TT24]}" Background="#FFF0F0F0">
            <Grid Background="#FFF0F0F0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="30"/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Label Content="{Binding UIString[MSDCE_LBL88], FallbackValue=Shortcuts}" Grid.ColumnSpan="4" BorderThickness="1"/>
                <TextBox x:Name="txtNewShortCut" Grid.Row="1" ToolTip="{Binding UIString[MSDCE_TT20]}" BorderThickness="1" />
                <Button x:Name="btnNewSc" Content="ü" Grid.Column="1" Grid.Row="1" Width="24" Height="24" FontFamily="Wingdings"
                        FontSize="14" Foreground="#FF2FAE09" VerticalContentAlignment="Bottom" Margin="2" FontWeight="Bold" Cursor="Hand"
                        ToolTipService.ShowOnDisabled="True" ToolTip="{Binding UIString[MSDCE_TT20]}"
                        Style="{StaticResource btnScEnabled}"
                        Command="{Binding PsCmd[mAddSc]}"/>
                <ListBox x:Name="lstBoxShortCuts" Grid.Row="2" MinWidth="180" Margin="0" ToolTip="{Binding UIString[MSDCE_TT23]}" ItemsSource="{Binding PsList[m_ReadShortCuts]}" MaxWidth="300" MaxHeight="500" Grid.ColumnSpan="2">
                    <ListBox.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="{Binding UIString[MSDCE_BTN2], FallbackValue=Activate}" Command="{Binding PsCmd[mScClick]}"/>
                            <MenuItem Header="{Binding UIString[MSDCE_BTN3], FallbackValue=Activate}" Command="{Binding PsCmd[mRemoveSc]}"/>
                        </ContextMenu>
                    </ListBox.ContextMenu>
                </ListBox>
                <Border BorderBrush="#FFABADB3" Grid.Row="3"
                	Visibility="{Binding CopyMode, Converter={StaticResource BooleanToVisibilityConverter}}" Grid.ColumnSpan="2" MaxWidth="250" MaxHeight="250" Margin="0,5,0,0" BorderThickness="0">
                    <Image Source="{Binding Prop[Thumbnail].Value}" Margin="0" Stretch="UniformToFill" />
                </Border>
            </Grid>
        </Expander>

    </Grid>
</WPF:DSWindow>